/// <reference path="typings/angularjs/angular.d.ts"/>
/// <reference path="toolkit.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/LOV.ftl
 */
var taskboard;
(function (taskboard) {
    (function (ERole) {
        ERole[ERole["ADMIN"] = 0] = "ADMIN";
        ERole[ERole["USER"] = 1] = "USER";
    })(taskboard.ERole || (taskboard.ERole = {}));
    var ERole = taskboard.ERole;
})(taskboard || (taskboard = {}));
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/Entities.ftl
 */
var taskboard;
(function (taskboard) {
    var EntityBase = (function () {
        function EntityBase() {
        }
        EntityBase.prototype.copy = function (e) {
            this.id = e.id;
            this.version = e.version;
            this.creation = e.creation;
            this.modification = e.modification;
            return this;
        };
        return EntityBase;
    }());
    taskboard.EntityBase = EntityBase;
    var Board = (function (_super) {
        __extends(Board, _super);
        function Board() {
            _super.apply(this, arguments);
        }
        Board.prototype.clone = function () {
            var o = new Board();
            o.copy(this);
            return o;
        };
        Board.prototype.copy = function (e) {
            _super.prototype.copy.call(this, e);
            this.name = e.name;
            this.description = e.description;
            this.lanes = e.lanes;
            this.users = e.users;
            return this;
        };
        return Board;
    }(EntityBase));
    taskboard.Board = Board;
    var Lane = (function (_super) {
        __extends(Lane, _super);
        function Lane() {
            _super.apply(this, arguments);
        }
        Lane.prototype.clone = function () {
            var o = new Lane();
            o.copy(this);
            return o;
        };
        Lane.prototype.copy = function (e) {
            _super.prototype.copy.call(this, e);
            this.name = e.name;
            this.position = e.position;
            this.boardId = e.boardId;
            this.board = e.board;
            this.tasks = e.tasks;
            this.notifications = e.notifications;
            return this;
        };
        return Lane;
    }(EntityBase));
    taskboard.Lane = Lane;
    var User = (function (_super) {
        __extends(User, _super);
        function User() {
            _super.apply(this, arguments);
        }
        User.prototype.clone = function () {
            var o = new User();
            o.copy(this);
            return o;
        };
        User.prototype.copy = function (e) {
            _super.prototype.copy.call(this, e);
            this.name = e.name;
            this.username = e.username;
            this.password = e.password;
            this.dead = e.dead;
            this.boards = e.boards;
            this.tasks = e.tasks;
            return this;
        };
        return User;
    }(EntityBase));
    taskboard.User = User;
    var Task = (function (_super) {
        __extends(Task, _super);
        function Task() {
            _super.apply(this, arguments);
        }
        Task.prototype.clone = function () {
            var o = new Task();
            o.copy(this);
            return o;
        };
        Task.prototype.copy = function (e) {
            _super.prototype.copy.call(this, e);
            this.title = e.title;
            this.detail = e.detail;
            this.headColor = e.headColor;
            this.bodyColor = e.bodyColor;
            this.position = e.position;
            this.reference = e.reference;
            this.spent = e.spent;
            this.remaining = e.remaining;
            this.userId = e.userId;
            this.laneId = e.laneId;
            this.user = e.user;
            this.lane = e.lane;
            this.notifications = e.notifications;
            return this;
        };
        return Task;
    }(EntityBase));
    taskboard.Task = Task;
    var Notification = (function (_super) {
        __extends(Notification, _super);
        function Notification() {
            _super.apply(this, arguments);
        }
        Notification.prototype.clone = function () {
            var o = new Notification();
            o.copy(this);
            return o;
        };
        Notification.prototype.copy = function (e) {
            _super.prototype.copy.call(this, e);
            this.email = e.email;
            this.taskId = e.taskId;
            this.laneId = e.laneId;
            this.task = e.task;
            this.lane = e.lane;
            return this;
        };
        return Notification;
    }(EntityBase));
    taskboard.Notification = Notification;
})(taskboard || (taskboard = {}));
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/DTO.ftl
 */
var taskboard;
(function (taskboard) {
    var IdVersionDTO = (function () {
        function IdVersionDTO() {
            this.version = 1;
        }
        IdVersionDTO.prototype.clone = function () {
            var o = new IdVersionDTO();
            o.copy(this);
            return o;
        };
        IdVersionDTO.prototype.copy = function (dto) {
            this.id = dto.id;
            this.version = dto.version;
            return this;
        };
        return IdVersionDTO;
    }());
    taskboard.IdVersionDTO = IdVersionDTO;
    var BoardSearchDTO = (function (_super) {
        __extends(BoardSearchDTO, _super);
        function BoardSearchDTO() {
            _super.apply(this, arguments);
        }
        BoardSearchDTO.prototype.clone = function () {
            var o = new BoardSearchDTO();
            o.copy(this);
            return o;
        };
        BoardSearchDTO.prototype.copy = function (dto) {
            _super.prototype.copy.call(this, dto);
            this.name = dto.name;
            return this;
        };
        BoardSearchDTO.prototype.reset = function () {
            this.page = 1;
            this.name = null;
        };
        return BoardSearchDTO;
    }(toolkit.Criteria));
    taskboard.BoardSearchDTO = BoardSearchDTO;
    var BoardUserDTO = (function (_super) {
        __extends(BoardUserDTO, _super);
        function BoardUserDTO() {
            _super.apply(this, arguments);
        }
        BoardUserDTO.prototype.clone = function () {
            var o = new BoardUserDTO();
            o.copy(this);
            return o;
        };
        BoardUserDTO.prototype.copy = function (dto) {
            _super.prototype.copy.call(this, dto);
            this.name = dto.name;
            this.belongs = dto.belongs;
            return this;
        };
        return BoardUserDTO;
    }(taskboard.IdVersionDTO));
    taskboard.BoardUserDTO = BoardUserDTO;
    var BoardUserSearchDTO = (function (_super) {
        __extends(BoardUserSearchDTO, _super);
        function BoardUserSearchDTO() {
            _super.apply(this, arguments);
        }
        BoardUserSearchDTO.prototype.clone = function () {
            var o = new BoardUserSearchDTO();
            o.copy(this);
            return o;
        };
        BoardUserSearchDTO.prototype.copy = function (dto) {
            _super.prototype.copy.call(this, dto);
            this.boardId = dto.boardId;
            this.name = dto.name;
            return this;
        };
        BoardUserSearchDTO.prototype.reset = function () {
            this.page = 1;
            this.boardId = null;
            this.name = null;
        };
        return BoardUserSearchDTO;
    }(toolkit.Criteria));
    taskboard.BoardUserSearchDTO = BoardUserSearchDTO;
    var IdentityDTO = (function () {
        function IdentityDTO() {
        }
        IdentityDTO.prototype.clone = function () {
            var o = new IdentityDTO();
            o.copy(this);
            return o;
        };
        IdentityDTO.prototype.copy = function (dto) {
            this.id = dto.id;
            this.name = dto.name;
            this.roles = dto.roles;
            return this;
        };
        return IdentityDTO;
    }());
    taskboard.IdentityDTO = IdentityDTO;
    var LoginDTO = (function () {
        function LoginDTO() {
        }
        LoginDTO.prototype.clone = function () {
            var o = new LoginDTO();
            o.copy(this);
            return o;
        };
        LoginDTO.prototype.copy = function (dto) {
            this.username = dto.username;
            this.password = dto.password;
            return this;
        };
        return LoginDTO;
    }());
    taskboard.LoginDTO = LoginDTO;
    var NotificationSearchDTO = (function (_super) {
        __extends(NotificationSearchDTO, _super);
        function NotificationSearchDTO() {
            _super.apply(this, arguments);
        }
        NotificationSearchDTO.prototype.clone = function () {
            var o = new NotificationSearchDTO();
            o.copy(this);
            return o;
        };
        NotificationSearchDTO.prototype.copy = function (dto) {
            _super.prototype.copy.call(this, dto);
            this.taskId = dto.taskId;
            this.email = dto.email;
            return this;
        };
        NotificationSearchDTO.prototype.reset = function () {
            this.page = 1;
            this.taskId = null;
            this.email = null;
        };
        return NotificationSearchDTO;
    }(toolkit.Criteria));
    taskboard.NotificationSearchDTO = NotificationSearchDTO;
    var UserDTO = (function (_super) {
        __extends(UserDTO, _super);
        function UserDTO() {
            _super.apply(this, arguments);
        }
        UserDTO.prototype.clone = function () {
            var o = new UserDTO();
            o.copy(this);
            return o;
        };
        UserDTO.prototype.copy = function (dto) {
            _super.prototype.copy.call(this, dto);
            this.name = dto.name;
            this.username = dto.username;
            this.password = dto.password;
            this.admin = dto.admin;
            return this;
        };
        return UserDTO;
    }(taskboard.IdVersionDTO));
    taskboard.UserDTO = UserDTO;
    var UserSearchDTO = (function (_super) {
        __extends(UserSearchDTO, _super);
        function UserSearchDTO() {
            _super.apply(this, arguments);
        }
        UserSearchDTO.prototype.clone = function () {
            var o = new UserSearchDTO();
            o.copy(this);
            return o;
        };
        UserSearchDTO.prototype.copy = function (dto) {
            _super.prototype.copy.call(this, dto);
            this.name = dto.name;
            return this;
        };
        UserSearchDTO.prototype.reset = function () {
            this.page = 1;
            this.name = null;
        };
        return UserSearchDTO;
    }(toolkit.Criteria));
    taskboard.UserSearchDTO = UserSearchDTO;
})(taskboard || (taskboard = {}));
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/ServiceOperationIn.ftl
 */
var taskboard;
(function (taskboard) {
    var AddUserToBoardIn = (function () {
        function AddUserToBoardIn() {
        }
        return AddUserToBoardIn;
    }());
    taskboard.AddUserToBoardIn = AddUserToBoardIn;
})(taskboard || (taskboard = {}));
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/ServiceOperationIn.ftl
 */
var taskboard;
(function (taskboard) {
    var RemoveUserFromBoardIn = (function () {
        function RemoveUserFromBoardIn() {
        }
        return RemoveUserFromBoardIn;
    }());
    taskboard.RemoveUserFromBoardIn = RemoveUserFromBoardIn;
})(taskboard || (taskboard = {}));
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/ServiceOperationIn.ftl
 */
var taskboard;
(function (taskboard) {
    var ChangeUserPasswordIn = (function () {
        function ChangeUserPasswordIn() {
        }
        return ChangeUserPasswordIn;
    }());
    taskboard.ChangeUserPasswordIn = ChangeUserPasswordIn;
})(taskboard || (taskboard = {}));
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/ServiceOperationIn.ftl
 */
var taskboard;
(function (taskboard) {
    var MoveTaskIn = (function () {
        function MoveTaskIn() {
        }
        return MoveTaskIn;
    }());
    taskboard.MoveTaskIn = MoveTaskIn;
})(taskboard || (taskboard = {}));
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/Services.ftl
 */
var taskboard;
(function (taskboard) {
    function defaultErrorHandler(fail, status) {
        if (status == 500) {
            var msg = fail.error + ": " + fail.message;
            toolkit.stickyError("Server Error", msg);
        }
    }
    var TaskBoardService = (function () {
        function TaskBoardService(http) {
            this.http = http;
        }
        TaskBoardService.prototype.whoAmI = function (successCallback, errorCallback) {
            var promisse = this.http.post("rest/taskboard/WhoAmI", {});
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.fetchBoardUsers = function (id, successCallback, errorCallback) {
            var payload;
            if (id != null)
                payload = "" + id;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/FetchBoardUsers", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.fetchBoardAllUsers = function (criteria, successCallback, errorCallback) {
            var payload;
            if (criteria != null)
                payload = criteria;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/FetchBoardAllUsers", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.fetchBoards = function (criteria, successCallback, errorCallback) {
            var payload;
            if (criteria != null)
                payload = criteria;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/FetchBoards", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.fetchBoardById = function (id, successCallback, errorCallback) {
            var payload;
            if (id != null)
                payload = "" + id;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/FetchBoardById", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.fullyLoadBoardById = function (id, successCallback, errorCallback) {
            var payload;
            if (id != null)
                payload = "" + id;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/FullyLoadBoardById", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.saveBoard = function (board, successCallback, errorCallback) {
            var payload;
            if (board != null)
                payload = board;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/SaveBoard", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.deleteBoard = function (id, successCallback, errorCallback) {
            var payload;
            if (id != null)
                payload = "" + id;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/DeleteBoard", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.addLane = function (boardId, successCallback, errorCallback) {
            var payload;
            if (boardId != null)
                payload = "" + boardId;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/AddLane", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.saveLane = function (lane, successCallback, errorCallback) {
            var payload;
            if (lane != null)
                payload = lane;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/SaveLane", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.deleteLastLane = function (boardId, successCallback, errorCallback) {
            var payload;
            if (boardId != null)
                payload = "" + boardId;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/DeleteLastLane", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.saveUser = function (user, successCallback, errorCallback) {
            var payload;
            if (user != null)
                payload = user;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/SaveUser", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.fetchUsers = function (criteria, successCallback, errorCallback) {
            var payload;
            if (criteria != null)
                payload = criteria;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/FetchUsers", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.disableUser = function (user, successCallback, errorCallback) {
            var payload;
            if (user != null)
                payload = user;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/DisableUser", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.addUserToBoard = function (input, successCallback, errorCallback) {
            var promisse = this.http.post("rest/taskboard/AddUserToBoard", input);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.removeUserFromBoard = function (input, successCallback, errorCallback) {
            var promisse = this.http.post("rest/taskboard/RemoveUserFromBoard", input);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.saveUserName = function (name, successCallback, errorCallback) {
            var payload;
            if (name != null)
                payload = '"' + name + '"';
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/SaveUserName", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.changeUserPassword = function (input, successCallback, errorCallback) {
            var promisse = this.http.post("rest/taskboard/ChangeUserPassword", input);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.saveTask = function (task, successCallback, errorCallback) {
            var payload;
            if (task != null)
                payload = task;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/SaveTask", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.moveTask = function (input, successCallback, errorCallback) {
            var promisse = this.http.post("rest/taskboard/MoveTask", input);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.fetchNotifications = function (criteria, successCallback, errorCallback) {
            var payload;
            if (criteria != null)
                payload = criteria;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/FetchNotifications", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.saveNotification = function (notification, successCallback, errorCallback) {
            var payload;
            if (notification != null)
                payload = notification;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/SaveNotification", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        TaskBoardService.prototype.deleteNotification = function (id, successCallback, errorCallback) {
            var payload;
            if (id != null)
                payload = "" + id;
            else
                payload = "null";
            var promisse = this.http.post("rest/taskboard/DeleteNotification", payload);
            if (successCallback != null) {
                promisse.success(successCallback);
            }
            promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
        };
        return TaskBoardService;
    }());
    taskboard.TaskBoardService = TaskBoardService;
    angular.module("remoteServices", [])
        .factory("taskBoardService", ["$http", function ($http) {
            return new TaskBoardService($http);
        }
    ]);
})(taskboard || (taskboard = {}));
