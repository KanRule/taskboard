/// <reference path="typings/angularjs/angular.d.ts"/>
/// <reference path="toolkit.ts"/>


/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/LOV.ftl
 */

module taskboard {
	export enum ERole {
		ADMIN,
		USER
	}
}
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/Entities.ftl
 */
 
module taskboard {

	export class EntityBase {
		id: number;
		version: number;
		creation: Date;
		modification: Date;
		
		copy(e: EntityBase): EntityBase {
			this.id = e.id;
			this.version = e.version;
			this.creation = e.creation;
			this.modification = e.modification;
			return this;
		}
	}
	
	export class Board extends EntityBase {
		name: string;
		description: string;
		lanes: Array<Lane>;
		users: Array<User>;
	
		clone(): Board {
			var o = new Board();
			o.copy(this);
			return o;
		}
	
		copy(e: Board): Board {
			super.copy(e);
			this.name = e.name;
			this.description = e.description;
			this.lanes = e.lanes;
			this.users = e.users;
			return this;
		}
	
	}
	
	export class Lane extends EntityBase {
		name: string;
		position: number;
		boardId: number;
		board: Board;
		tasks: Array<Task>;
		notifications: Array<Notification>;
	
		clone(): Lane {
			var o = new Lane();
			o.copy(this);
			return o;
		}
	
		copy(e: Lane): Lane {
			super.copy(e);
			this.name = e.name;
			this.position = e.position;
			this.boardId = e.boardId;
			this.board = e.board;
			this.tasks = e.tasks;
			this.notifications = e.notifications;
			return this;
		}
	
	}
	
	export class User extends EntityBase {
		name: string;
		username: string;
		password: string;
		dead: number;
		boards: Array<Board>;
		tasks: Array<Task>;
	
		clone(): User {
			var o = new User();
			o.copy(this);
			return o;
		}
	
		copy(e: User): User {
			super.copy(e);
			this.name = e.name;
			this.username = e.username;
			this.password = e.password;
			this.dead = e.dead;
			this.boards = e.boards;
			this.tasks = e.tasks;
			return this;
		}
	
	}
	
	export class Task extends EntityBase {
		title: string;
		detail: string;
		headColor: string;
		bodyColor: string;
		position: number;
		reference: string;
		spent: number;
		remaining: number;
		userId: number;
		laneId: number;
		user: User;
		lane: Lane;
		notifications: Array<Notification>;
	
		clone(): Task {
			var o = new Task();
			o.copy(this);
			return o;
		}
	
		copy(e: Task): Task {
			super.copy(e);
			this.title = e.title;
			this.detail = e.detail;
			this.headColor = e.headColor;
			this.bodyColor = e.bodyColor;
			this.position = e.position;
			this.reference = e.reference;
			this.spent = e.spent;
			this.remaining = e.remaining;
			this.userId = e.userId;
			this.laneId = e.laneId;
			this.user = e.user;
			this.lane = e.lane;
			this.notifications = e.notifications;
			return this;
		}
	
	}
	
	export class Notification extends EntityBase {
		email: string;
		taskId: number;
		laneId: number;
		task: Task;
		lane: Lane;
	
		clone(): Notification {
			var o = new Notification();
			o.copy(this);
			return o;
		}
	
		copy(e: Notification): Notification {
			super.copy(e);
			this.email = e.email;
			this.taskId = e.taskId;
			this.laneId = e.laneId;
			this.task = e.task;
			this.lane = e.lane;
			return this;
		}
	
	}
	
}
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/DTO.ftl
 */
module taskboard {
	export class IdVersionDTO {
		id: number;
		version: number = 1;
			
		clone(): IdVersionDTO {
			var o = new IdVersionDTO();
			o.copy(this);
			return o;
		}
	
		copy(dto: IdVersionDTO): IdVersionDTO {
			
			this.id = dto.id;
			this.version = dto.version;
			return this;
		}
	
	}
	
	export class BoardSearchDTO extends toolkit.Criteria {
		name: string;
			
		clone(): BoardSearchDTO {
			var o = new BoardSearchDTO();
			o.copy(this);
			return o;
		}
	
		copy(dto: BoardSearchDTO): BoardSearchDTO {
			super.copy(dto);
			this.name = dto.name;
			return this;
		}
	
		reset(){
			this.page = 1;
			this.name = null;
		}
	}
	
	export class BoardUserDTO extends taskboard.IdVersionDTO {
		name: string;
		belongs: boolean;
			
		clone(): BoardUserDTO {
			var o = new BoardUserDTO();
			o.copy(this);
			return o;
		}
	
		copy(dto: BoardUserDTO): BoardUserDTO {
			super.copy(dto);
			this.name = dto.name;
			this.belongs = dto.belongs;
			return this;
		}
	
	}
	
	export class BoardUserSearchDTO extends toolkit.Criteria {
		boardId: number;
		name: string;
			
		clone(): BoardUserSearchDTO {
			var o = new BoardUserSearchDTO();
			o.copy(this);
			return o;
		}
	
		copy(dto: BoardUserSearchDTO): BoardUserSearchDTO {
			super.copy(dto);
			this.boardId = dto.boardId;
			this.name = dto.name;
			return this;
		}
	
		reset(){
			this.page = 1;
			this.boardId = null;
			this.name = null;
		}
	}
	
	export class IdentityDTO {
		id: number;
		name: string;
		roles: Array<string>;
			
		clone(): IdentityDTO {
			var o = new IdentityDTO();
			o.copy(this);
			return o;
		}
	
		copy(dto: IdentityDTO): IdentityDTO {
			
			this.id = dto.id;
			this.name = dto.name;
			this.roles = dto.roles;
			return this;
		}
	
	}
	
	export class LoginDTO {
		username: string;
		password: string;
			
		clone(): LoginDTO {
			var o = new LoginDTO();
			o.copy(this);
			return o;
		}
	
		copy(dto: LoginDTO): LoginDTO {
			
			this.username = dto.username;
			this.password = dto.password;
			return this;
		}
	
	}
	
	export class NotificationSearchDTO extends toolkit.Criteria {
		taskId: number;
		email: string;
			
		clone(): NotificationSearchDTO {
			var o = new NotificationSearchDTO();
			o.copy(this);
			return o;
		}
	
		copy(dto: NotificationSearchDTO): NotificationSearchDTO {
			super.copy(dto);
			this.taskId = dto.taskId;
			this.email = dto.email;
			return this;
		}
	
		reset(){
			this.page = 1;
			this.taskId = null;
			this.email = null;
		}
	}
	
	export class UserDTO extends taskboard.IdVersionDTO {
		name: string;
		username: string;
		password: string;
		admin: boolean;
			
		clone(): UserDTO {
			var o = new UserDTO();
			o.copy(this);
			return o;
		}
	
		copy(dto: UserDTO): UserDTO {
			super.copy(dto);
			this.name = dto.name;
			this.username = dto.username;
			this.password = dto.password;
			this.admin = dto.admin;
			return this;
		}
	
	}
	
	export class UserSearchDTO extends toolkit.Criteria {
		name: string;
			
		clone(): UserSearchDTO {
			var o = new UserSearchDTO();
			o.copy(this);
			return o;
		}
	
		copy(dto: UserSearchDTO): UserSearchDTO {
			super.copy(dto);
			this.name = dto.name;
			return this;
		}
	
		reset(){
			this.page = 1;
			this.name = null;
		}
	}
	
}
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/ServiceOperationIn.ftl
 */
module taskboard {
	export class AddUserToBoardIn {
		boardId: number;
		userId: number;
	}
}
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/ServiceOperationIn.ftl
 */
module taskboard {
	export class RemoveUserFromBoardIn {
		boardId: number;
		userId: number;
	}
}
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/ServiceOperationIn.ftl
 */
module taskboard {
	export class ChangeUserPasswordIn {
		oldPwd: string;
		newPwd: string;
	}
}
/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/ServiceOperationIn.ftl
 */
module taskboard {
	export class MoveTaskIn {
		taskId: number;
		laneId: number;
		position: number;
	}
}

/**
 * WARNING: Generated code. Changes will be overwritten.
 * Generated by: ts/Services.ftl
 */

module taskboard{
	function defaultErrorHandler(fail: toolkit.Fail, status: number){
	    if (status == 500) {
	        var msg = fail.error + ": " + fail.message;
	        toolkit.stickyError("Server Error", msg);
	    }
	}

	export class TaskBoardService {
		private http: ng.IHttpService;
	
		constructor(http: ng.IHttpService){
			this.http = http;
		}
		
		whoAmI(
			successCallback?: (result: IdentityDTO) => void, 
			errorCallback?: (error) => void) {
		
			var promisse = this.http.post(
				"rest/taskboard/WhoAmI", 
				{}
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		fetchBoardUsers(id: number, 
			successCallback?: (result: Array<BoardUserDTO>) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (id != null)
				payload = "" + id;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/FetchBoardUsers", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		fetchBoardAllUsers(criteria: BoardUserSearchDTO, 
			successCallback?: (result: toolkit.Page<BoardUserDTO>) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (criteria != null)
				payload = criteria;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/FetchBoardAllUsers", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		fetchBoards(criteria: BoardSearchDTO, 
			successCallback?: (result: toolkit.Page<Board>) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (criteria != null)
				payload = criteria;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/FetchBoards", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		fetchBoardById(id: number, 
			successCallback?: (result: Board) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (id != null)
				payload = "" + id;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/FetchBoardById", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		fullyLoadBoardById(id: number, 
			successCallback?: (result: Board) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (id != null)
				payload = "" + id;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/FullyLoadBoardById", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		saveBoard(board: Board, 
			successCallback?: (result: Board) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (board != null)
				payload = board;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/SaveBoard", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		deleteBoard(id: number, 
			successCallback?: (result: void) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (id != null)
				payload = "" + id;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/DeleteBoard", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		addLane(boardId: number, 
			successCallback?: (result: void) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (boardId != null)
				payload = "" + boardId;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/AddLane", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		saveLane(lane: Lane, 
			successCallback?: (result: Lane) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (lane != null)
				payload = lane;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/SaveLane", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		deleteLastLane(boardId: number, 
			successCallback?: (result: void) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (boardId != null)
				payload = "" + boardId;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/DeleteLastLane", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		saveUser(user: UserDTO, 
			successCallback?: (result: boolean) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (user != null)
				payload = user;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/SaveUser", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		fetchUsers(criteria: UserSearchDTO, 
			successCallback?: (result: toolkit.Page<UserDTO>) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (criteria != null)
				payload = criteria;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/FetchUsers", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		disableUser(user: IdVersionDTO, 
			successCallback?: (result: void) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (user != null)
				payload = user;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/DisableUser", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		addUserToBoard(input: AddUserToBoardIn, 
			successCallback?: (result: void) => void, 
			errorCallback?: (error) => void) {
		
			var promisse = this.http.post(
				"rest/taskboard/AddUserToBoard", 
				input
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		removeUserFromBoard(input: RemoveUserFromBoardIn, 
			successCallback?: (result: void) => void, 
			errorCallback?: (error) => void) {
		
			var promisse = this.http.post(
				"rest/taskboard/RemoveUserFromBoard", 
				input
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		saveUserName(name: string, 
			successCallback?: (result: void) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (name != null)
				payload = '"' + name + '"';
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/SaveUserName", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		changeUserPassword(input: ChangeUserPasswordIn, 
			successCallback?: (result: string) => void, 
			errorCallback?: (error) => void) {
		
			var promisse = this.http.post(
				"rest/taskboard/ChangeUserPassword", 
				input
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		saveTask(task: Task, 
			successCallback?: (result: Task) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (task != null)
				payload = task;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/SaveTask", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		moveTask(input: MoveTaskIn, 
			successCallback?: (result: void) => void, 
			errorCallback?: (error) => void) {
		
			var promisse = this.http.post(
				"rest/taskboard/MoveTask", 
				input
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		fetchNotifications(criteria: NotificationSearchDTO, 
			successCallback?: (result: toolkit.Page<Notification>) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (criteria != null)
				payload = criteria;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/FetchNotifications", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		saveNotification(notification: Notification, 
			successCallback?: (result: Notification) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (notification != null)
				payload = notification;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/SaveNotification", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
		deleteNotification(id: number, 
			successCallback?: (result: void) => void, 
			errorCallback?: (error) => void) {
			var payload: any;
			if (id != null)
				payload = "" + id;
			else
				payload = "null";
		
			var promisse = this.http.post(
				"rest/taskboard/DeleteNotification", 
				payload
			);
			if(successCallback != null) {
				promisse.success(successCallback);
			}
			promisse.error(errorCallback != null ? errorCallback : defaultErrorHandler);
		}
		
	}
	
	angular.module("remoteServices", [])
		.factory("taskBoardService",
				["$http", function($http: ng.IHttpService): TaskBoardService {
						return new TaskBoardService($http);
					}
				]);
}
