/**
 * Warning: Generated code! do not change!
 * Generated by: go/EntityDB.ftl
 */
package tables
import (
	"github.com/quintans/goSQL/db"
	"github.com/quintans/taskboard/common/entity"
	. "github.com/quintans/toolkit/ext"
)

var (
	NOTIFICATION = db.TABLE("NOTIFICATION")
	NOTIFICATION_C_ID = NOTIFICATION.KEY("ID")
	NOTIFICATION_C_VERSION = NOTIFICATION.VERSION("VERSION")
	// Audit
	NOTIFICATION_C_CREATION = NOTIFICATION.COLUMN("CREATION")
	NOTIFICATION_C_MODIFICATION = NOTIFICATION.COLUMN("MODIFICATION")
	NOTIFICATION_C_USER_CREATION = NOTIFICATION.COLUMN("USER_CREATION").As("UserCreationId")
	NOTIFICATION_C_USER_MODIFICATION = NOTIFICATION.COLUMN("USER_MODIFICATION").As("UserModificationId")
	// Atributos 
	NOTIFICATION_C_EMAIL = NOTIFICATION.COLUMN("EMAIL")
	NOTIFICATION_C_TASK_ID = NOTIFICATION.COLUMN("TASK").As("TaskId")
	NOTIFICATION_C_LANE_ID = NOTIFICATION.COLUMN("LANE").As("LaneId")
	//FK's
	NOTIFICATION_A_TASK = NOTIFICATION.
				ASSOCIATE(NOTIFICATION_C_TASK_ID).TO(TASK_C_ID).
				As("Task")
	NOTIFICATION_A_LANE = NOTIFICATION.
				ASSOCIATE(NOTIFICATION_C_LANE_ID).TO(LANE_C_ID).
				As("Lane")
	NOTIFICATION_A_USER_CREATION = NOTIFICATION.ASSOCIATE(NOTIFICATION_C_USER_CREATION).TO(USER_C_ID).As("UserCreation")
	NOTIFICATION_A_USER_MODIFICATION = NOTIFICATION.ASSOCIATE(NOTIFICATION_C_USER_MODIFICATION).TO(USER_C_ID).As("UserModification")
)

func init() {
	NOTIFICATION.PreInsertTrigger = func(ins *db.Insert) {
		ins.Set(NOTIFICATION_C_VERSION, 1)
		ins.Set(NOTIFICATION_C_CREATION, NOW())
		uid, ok := ins.GetDb().GetAttribute(entity.ATTR_USERID)
		if ok {
			ins.Set(NOTIFICATION_C_USER_CREATION, uid.(int64))
		}
	}
	NOTIFICATION.PreUpdateTrigger = func(upd *db.Update) {
		upd.Set(NOTIFICATION_C_MODIFICATION, NOW())
		uid, ok := upd.GetDb().GetAttribute(entity.ATTR_USERID)
		if ok {
			upd.Set(NOTIFICATION_C_USER_MODIFICATION, uid.(int64))
		}
	}
}
