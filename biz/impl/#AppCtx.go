/**
 * Warning: Generated code! do not change!
 * Generated by: go/AppCtx.ftl
 */
package impl

import (
	"github.com/quintans/toolkit/web"
	"github.com/quintans/taskboard/biz/entity"
	"github.com/quintans/taskboard/common/service"
	"net/http"
	"github.com/quintans/goSQL/db"
)

func NewAppCtx(w http.ResponseWriter, r *http.Request) *AppCtx {
	this := new(AppCtx)
	this.Context = new(web.Context)
	this.Init(this, w, r)
	this.BoardDAOFactory = NewBoardDAO
	this.LaneDAOFactory = NewLaneDAO
	this.TaskDAOFactory = NewTaskDAO
	this.NotificationDAOFactory = NewNotificationDAO
	this.TaskBoardServiceFactory = NewTaskBoardService
	return this
}

type AppCtx struct {
	*web.Context
	
	Store db.IDb
	boardDAO entity.IBoardDAO
	BoardDAOFactory func(appCtx *AppCtx) entity.IBoardDAO
	laneDAO entity.ILaneDAO
	LaneDAOFactory func(appCtx *AppCtx) entity.ILaneDAO
	taskDAO entity.ITaskDAO
	TaskDAOFactory func(appCtx *AppCtx) entity.ITaskDAO
	notificationDAO entity.INotificationDAO
	NotificationDAOFactory func(appCtx *AppCtx) entity.INotificationDAO
	taskBoardService service.ITaskBoardService
	TaskBoardServiceFactory func(appCtx *AppCtx) service.ITaskBoardService
}

func (this *AppCtx) GetBoardDAO() entity.IBoardDAO {
	if this.boardDAO == nil {
		this.boardDAO = this.BoardDAOFactory(this)
	}
	return this.boardDAO
}

func (this *AppCtx) GetLaneDAO() entity.ILaneDAO {
	if this.laneDAO == nil {
		this.laneDAO = this.LaneDAOFactory(this)
	}
	return this.laneDAO
}

func (this *AppCtx) GetTaskDAO() entity.ITaskDAO {
	if this.taskDAO == nil {
		this.taskDAO = this.TaskDAOFactory(this)
	}
	return this.taskDAO
}

func (this *AppCtx) GetNotificationDAO() entity.INotificationDAO {
	if this.notificationDAO == nil {
		this.notificationDAO = this.NotificationDAOFactory(this)
	}
	return this.notificationDAO
}

func (this *AppCtx) GetTaskBoardService() service.ITaskBoardService {
	if this.taskBoardService == nil {
		// will GC collect this circular reference?? 
		this.taskBoardService = this.TaskBoardServiceFactory(this)
	}
	return this.taskBoardService
}

func (this *AppCtx) BuildJsonRpc(transaction func(ctx web.IContext) error) *web.JsonRpc {
	// JSON-RPC services
	var svc *web.Service
	var act *web.Action
	json := web.NewJsonRpc(nil) // json-rpc resgistry

	// JSON Vulnerability Protection.
	// AngularJS will automatically strip the prefix before processing it as JSON.
	jsonpProtection := func(ctx web.IContext) error {
		err := ctx.Proceed()
		// this must be written after because cookies might be set (ex: Login)
		if err == nil {
			ctx.GetResponse().Write([]byte(")]}',\n"))
		}
		return err
	}
	
	svc = json.RegisterAs("taskboard", this.GetTaskBoardService())
	act = svc.GetAction("FetchBoards")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("FetchBoardById")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("FullyLoadBoardById")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("SaveBoard")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("DeleteBoard")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("AddLane")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("SaveLane")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("DeleteLastLane")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("SaveTask")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("MoveTask")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("FetchNotifications")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("SaveNotification")
	act.PushFilterFunc(jsonpProtection, transaction)
	act = svc.GetAction("DeleteNotification")
	act.PushFilterFunc(jsonpProtection, transaction)
	return json
}
