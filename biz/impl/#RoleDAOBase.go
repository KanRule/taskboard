/**
 * WARNING: Generated code! do not change!
 * Generated by: go/EntityDAOBase.ftl
 */
package impl

import (
	"github.com/quintans/taskboard/common/entity"
	T "github.com/quintans/taskboard/biz/tables"
	"github.com/quintans/toolkit/web/app"
	coll "github.com/quintans/toolkit/collection"
)

type RoleDAOBase struct {
	Context *AppCtx
}

func (this RoleDAOBase) Delete(entity *entity.Role) error {
	store := this.Context.Store
	return app.Delete(store, T.ROLE, entity)
}
	
func (this RoleDAOBase) DeleteById(id int64) (bool, error) {
	store := this.Context.Store
	return app.DeleteById(store, T.ROLE, id)
}

func (this RoleDAOBase) DeleteByIdAndVersion(id int64, version int64) error {
	store := this.Context.Store
	return app.DeleteByIdAndVersion(store, T.ROLE, id, version)
}
    
func (this RoleDAOBase) Save(entity *entity.Role) error {
	store := this.Context.Store
	return app.Save(store, T.ROLE, entity)
}

func (this RoleDAOBase) FindById(id int64) (*entity.Role, error) {
	entity := entity.NewRole()
	store := this.Context.Store
	ok, err := app.FindById(store, T.ROLE, entity, id)
	if ok {
		return entity, nil
	}
	return nil, err
}

func ConvertToRole(list coll.Collection) []*entity.Role {
	// converts the list to an array
	entities := make([]*entity.Role, list.Size(), list.Size())
	i := 0
	for e := list.Enumerator(); e.HasNext(); i++ {
		entities[i] = e.Next().(*entity.Role)
	}
	return entities
}

func (this RoleDAOBase) FindAll() ([]*entity.Role, error) {
	typ := (*entity.Role)(nil)
	store := this.Context.Store
	list, err := app.FindAll(store, T.ROLE, typ)
	if err != nil {
		return nil, err
	}
	entities := ConvertToRole(list)
	return entities, nil
}
    
func (this RoleDAOBase) FindByUserKind(userId *int64, kind *string) (*entity.Role, error) {
	entity := entity.NewRole()
	store := this.Context.Store
	ok, err := store.Query(T.ROLE).
		All().
    	Where(
    		T.ROLE_C_USER_ID.Matches(*userId),
    		T.ROLE_C_KIND.Matches(*kind),
		).
		SelectTo(entity)
    if err != nil {
    	return nil, err
    }
    if ok {
	    return entity, nil
    }
    return nil, nil
}
    
