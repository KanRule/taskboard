/**
 * WARNING: Generated code! do not change!
 * Generated by: go/EntityDAOBase.ftl
 */
package impl

import (
	"github.com/quintans/taskboard/common/entity"
	T "github.com/quintans/taskboard/biz/tables"
	"github.com/quintans/toolkit/web/app"
	coll "github.com/quintans/toolkit/collection"
)

type NotificationDAOBase struct {
	Context *AppCtx
}

func (this NotificationDAOBase) Delete(entity *entity.Notification) error {
	store := this.Context.Store
	return app.Delete(store, T.NOTIFICATION, entity)
}
	
func (this NotificationDAOBase) DeleteById(id int64) (bool, error) {
	store := this.Context.Store
	return app.DeleteById(store, T.NOTIFICATION, id)
}

func (this NotificationDAOBase) DeleteByIdAndVersion(id int64, version int64) error {
	store := this.Context.Store
	return app.DeleteByIdAndVersion(store, T.NOTIFICATION, id, version)
}
    
func (this NotificationDAOBase) Save(entity *entity.Notification) error {
	store := this.Context.Store
	return app.Save(store, T.NOTIFICATION, entity)
}

func (this NotificationDAOBase) FindById(id int64) (*entity.Notification, error) {
	entity := entity.NewNotification()
	store := this.Context.Store
	ok, err := app.FindById(store, T.NOTIFICATION, entity, id)
	if ok {
		return entity, nil
	}
	return nil, err
}

func ConvertToNotification(list coll.Collection) []*entity.Notification {
	// converts the list to an array
	entities := make([]*entity.Notification, list.Size(), list.Size())
	i := 0
	for e := list.Enumerator(); e.HasNext(); i++ {
		entities[i] = e.Next().(*entity.Notification)
	}
	return entities
}

func (this NotificationDAOBase) FindAll() ([]*entity.Notification, error) {
	typ := (*entity.Notification)(nil)
	store := this.Context.Store
	list, err := app.FindAll(store, T.NOTIFICATION, typ)
	if err != nil {
		return nil, err
	}
	entities := ConvertToNotification(list)
	return entities, nil
}
    
