/**
 * WARNING: Generated code! do not change!
 * Generated by: go/EntityDAOBase.ftl
 */
package impl

import (
	"github.com/quintans/taskboard/common/entity"
	T "github.com/quintans/taskboard/biz/tables"
	"github.com/quintans/toolkit/web/app"
	coll "github.com/quintans/toolkit/collection"
)

type LaneDAOBase struct {
	Context *AppCtx
}

func (this LaneDAOBase) Delete(entity *entity.Lane) error {
	store := this.Context.Store
	return app.Delete(store, T.LANE, entity)
}
	
func (this LaneDAOBase) DeleteById(id int64) (bool, error) {
	store := this.Context.Store
	return app.DeleteById(store, T.LANE, id)
}

func (this LaneDAOBase) DeleteByIdAndVersion(id int64, version int64) error {
	store := this.Context.Store
	return app.DeleteByIdAndVersion(store, T.LANE, id, version)
}
    
func (this LaneDAOBase) Save(entity *entity.Lane) error {
	store := this.Context.Store
	return app.Save(store, T.LANE, entity)
}

func (this LaneDAOBase) FindById(id int64) (*entity.Lane, error) {
	entity := entity.NewLane()
	store := this.Context.Store
	ok, err := app.FindById(store, T.LANE, entity, id)
	if ok {
		return entity, nil
	}
	return nil, err
}

func ConvertToLane(list coll.Collection) []*entity.Lane {
	// converts the list to an array
	entities := make([]*entity.Lane, list.Size(), list.Size())
	i := 0
	for e := list.Enumerator(); e.HasNext(); i++ {
		entities[i] = e.Next().(*entity.Lane)
	}
	return entities
}

func (this LaneDAOBase) FindAll() ([]*entity.Lane, error) {
	typ := (*entity.Lane)(nil)
	store := this.Context.Store
	list, err := app.FindAll(store, T.LANE, typ)
	if err != nil {
		return nil, err
	}
	entities := ConvertToLane(list)
	return entities, nil
}
    
func (this LaneDAOBase) FindByPos(boardId *int64, position *int64) (*entity.Lane, error) {
	entity := entity.NewLane()
	store := this.Context.Store
	ok, err := store.Query(T.LANE).
		All().
    	Where(
    		T.LANE_C_BOARD_ID.Matches(*boardId),
    		T.LANE_C_POSITION.Matches(*position),
		).
		SelectTo(entity)
    if err != nil {
    	return nil, err
    }
    if ok {
	    return entity, nil
    }
    return nil, nil
}
    
