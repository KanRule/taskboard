/**
 * WARNING: Generated code! do not change!
 * Generated by: go/Entity.ftl
 */
package entity;
import (
	"github.com/quintans/toolkit"
	"github.com/quintans/toolkit/web/app"
	"github.com/quintans/toolkit/ext"
)

var _ toolkit.Hasher = &Board{}

func NewBoard() *Board {
	this := new(Board)	
	return this
}

type Board struct {
	EntityAudit
	
	//ATTRIBUTES
	Name *string `json:"name"`
	Description *string `json:"description"`
	// ASSOCIATIONS
	// lanes
	Lanes []*Lane `json:"lanes"`
	// users
	Users []*User `json:"users"`
}

func (this *Board) SetDescription(description *string) {
	this.Description = description
	this.Mark("Description")
}

func (this *Board) SetName(name *string) {
	this.Name = name
	this.Mark("Name")
}

func (this *Board) Clone() interface{} {
	clone := NewBoard()
	clone.Copy(this)
	return clone
}
	
func (this *Board) Copy(entity *Board) {
	if entity != nil {
		this.EntityAudit.Copy(entity.EntityAudit)
		// attributes
		this.Name = app.CopyString(entity.Name)
		this.Description = app.CopyString(entity.Description)
		// associations
		this.Lanes = make([]*Lane, len(entity.Lanes), cap(entity.Lanes))
		copy(this.Lanes, entity.Lanes)
		this.Users = make([]*User, len(entity.Users), cap(entity.Users))
		copy(this.Users, entity.Users)
	}
}
		
func (this *Board) String() string {
	sb := toolkit.NewStrBuffer()
	sb.Add("{Id: ", this.Id, ", Version: ", this.Version)
	sb.Add(", Name: ", this.Name)
	sb.Add(", Description: ", this.Description)
	sb.Add("}")
	return sb.String()
}
	
func (this *Board) Equals(e interface{}) bool {
	if this == e {
		return true
	}

	switch t := e.(type) {
	case *Board:
		return this.Id != nil && t.Id != nil && *this.Id == *t.Id
	}
	return false
}

func (this *Board) HashCode() int {
	result := toolkit.HashType(toolkit.HASH_SEED, this)
	result = toolkit.HashLong(result, ext.DefInt64(this.Id, 0))
	return result
}
