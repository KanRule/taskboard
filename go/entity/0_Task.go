/**
 * WARNING: Generated code! do not change!
 * Generated by: go/Entity.ftl
 */
package entity;
import (
	"github.com/quintans/toolkit"
	"github.com/quintans/toolkit/web/app"
	"github.com/quintans/toolkit/ext"
)

var _ toolkit.Hasher = &Task{}

func NewTask() *Task {
	this := new(Task)	
	return this
}

type Task struct {
	EntityAudit
	
	//ATTRIBUTES
	Title *string `json:"title"`
	Detail *string `json:"detail"`
	HeadColor *string `json:"headColor"`
	BodyColor *string `json:"bodyColor"`
	Position *int64 `json:"position"`
	Reference *string `json:"reference"`
	Spent *int64 `json:"spent"`
	Remaining *int64 `json:"remaining"`
	UserId *int64 `json:"userId"`
	LaneId *int64 `json:"laneId"`
	// ASSOCIATIONS
	// user
	User *User `json:"user"`
	// lane
	Lane *Lane `json:"lane"`
	// notifications
	Notifications []*Notification `json:"notifications"`
}

func (this *Task) SetBodyColor(bodyColor *string) {
	this.BodyColor = bodyColor
	this.Mark("BodyColor")
}

func (this *Task) SetPosition(position *int64) {
	this.Position = position
	this.Mark("Position")
}

func (this *Task) SetReference(reference *string) {
	this.Reference = reference
	this.Mark("Reference")
}

func (this *Task) SetUserId(userId *int64) {
	this.UserId = userId
	this.Mark("UserId")
}

func (this *Task) SetHeadColor(headColor *string) {
	this.HeadColor = headColor
	this.Mark("HeadColor")
}

func (this *Task) SetSpent(spent *int64) {
	this.Spent = spent
	this.Mark("Spent")
}

func (this *Task) SetTitle(title *string) {
	this.Title = title
	this.Mark("Title")
}

func (this *Task) SetRemaining(remaining *int64) {
	this.Remaining = remaining
	this.Mark("Remaining")
}

func (this *Task) SetLaneId(laneId *int64) {
	this.LaneId = laneId
	this.Mark("LaneId")
}

func (this *Task) SetDetail(detail *string) {
	this.Detail = detail
	this.Mark("Detail")
}

func (this *Task) Clone() interface{} {
	clone := NewTask()
	clone.Copy(this)
	return clone
}
	
func (this *Task) Copy(entity *Task) {
	if entity != nil {
		this.EntityAudit.Copy(entity.EntityAudit)
		// attributes
		this.Title = app.CopyString(entity.Title)
		this.Detail = app.CopyString(entity.Detail)
		this.HeadColor = app.CopyString(entity.HeadColor)
		this.BodyColor = app.CopyString(entity.BodyColor)
		this.Position = app.CopyInteger(entity.Position)
		this.Reference = app.CopyString(entity.Reference)
		this.Spent = app.CopyInteger(entity.Spent)
		this.Remaining = app.CopyInteger(entity.Remaining)
		// associations
		this.User = entity.User
		this.Lane = entity.Lane
		this.Notifications = make([]*Notification, len(entity.Notifications), cap(entity.Notifications))
		copy(this.Notifications, entity.Notifications)
	}
}
		
func (this *Task) String() string {
	sb := toolkit.NewStrBuffer()
	sb.Add("{Id: ", this.Id, ", Version: ", this.Version)
	sb.Add(", Title: ", this.Title)
	sb.Add(", Detail: ", this.Detail)
	sb.Add(", HeadColor: ", this.HeadColor)
	sb.Add(", BodyColor: ", this.BodyColor)
	sb.Add(", Position: ", this.Position)
	sb.Add(", Reference: ", this.Reference)
	sb.Add(", Spent: ", this.Spent)
	sb.Add(", Remaining: ", this.Remaining)
	sb.Add(", *UserId: ", *this.UserId)
	sb.Add(", *LaneId: ", *this.LaneId)
	sb.Add("}")
	return sb.String()
}
	
func (this *Task) Equals(e interface{}) bool {
	if this == e {
		return true
	}

	switch t := e.(type) {
	case *Task:
		return this.Id != nil && t.Id != nil && *this.Id == *t.Id
	}
	return false
}

func (this *Task) HashCode() int {
	result := toolkit.HashType(toolkit.HASH_SEED, this)
	result = toolkit.HashLong(result, ext.DefInt64(this.Id, 0))
	return result
}
