/**
 * WARNING: Generated code! do not change!
 * Generated by: go/Entity.ftl
 */
package entity;
import (
	"github.com/quintans/toolkit"
	"github.com/quintans/toolkit/ext"
)

var _ toolkit.Hasher = &Notification{}

func NewNotification() *Notification {
	this := new(Notification)	
	return this
}

type Notification struct {
	EntityAudit
	
	//ATTRIBUTES
	Email string `json:"email"`
	TaskId int64 `json:"taskId"`
	LaneId int64 `json:"laneId"`
	// ASSOCIATIONS
	// task
	Task *Task `json:"task"`
	// lane
	Lane *Lane `json:"lane"`
}

func (this *Notification) SetEmail(email string) {
	this.Email = email
	this.Mark("Email")
}

func (this *Notification) SetTaskId(taskId int64) {
	this.TaskId = taskId
	this.Mark("TaskId")
}

func (this *Notification) SetLaneId(laneId int64) {
	this.LaneId = laneId
	this.Mark("LaneId")
}

func (this *Notification) Clone() interface{} {
	clone := NewNotification()
	clone.Copy(this)
	return clone
}
	
func (this *Notification) Copy(entity *Notification) {
	if entity != nil {
		this.EntityAudit.Copy(entity.EntityAudit)
		// attributes
		this.Email = entity.Email
		// associations
		this.Task = entity.Task
		this.Lane = entity.Lane
	}
}
		
func (this *Notification) String() string {
	sb := toolkit.NewStrBuffer()
	sb.Add("{Id: ", this.Id, ", Version: ", this.Version)
	sb.Add(", Email: ", this.Email)
	sb.Add(", TaskId: ", this.TaskId)
	sb.Add(", LaneId: ", this.LaneId)
	sb.Add("}")
	return sb.String()
}
	
func (this *Notification) Equals(e interface{}) bool {
	if this == e {
		return true
	}

	switch t := e.(type) {
	case *Notification:
		return this.Id != nil && t.Id != nil && *this.Id == *t.Id
	}
	return false
}

func (this *Notification) HashCode() int {
	result := toolkit.HashType(toolkit.HASH_SEED, this)
	result = toolkit.HashLong(result, ext.DefInt64(this.Id, 0))
	return result
}
