/**
 * Warning: Generated code! do not change!
 * Generated by: go/EntityDB.ftl
 */
package tables
import (
	"github.com/quintans/goSQL/db"
	"github.com/quintans/taskboard/go/entity"
	. "github.com/quintans/toolkit/ext"
)

var (
	BOARD = db.TABLE("BOARD")
	BOARD_C_ID = BOARD.KEY("ID")
	BOARD_C_VERSION = BOARD.VERSION("VERSION")
	// Audit
	BOARD_C_CREATION = BOARD.COLUMN("CREATION")
	BOARD_C_MODIFICATION = BOARD.COLUMN("MODIFICATION")
	BOARD_C_USER_CREATION = BOARD.COLUMN("USER_CREATION").As("UserCreationId")
	BOARD_C_USER_MODIFICATION = BOARD.COLUMN("USER_MODIFICATION").As("UserModificationId")
	// Atributos 
	BOARD_C_NAME = BOARD.COLUMN("NAME")
	BOARD_C_DESCRIPTION = BOARD.COLUMN("DESCRIPTION")
	//FK's
	BOARD_A_LANES = BOARD.
				ASSOCIATE(BOARD_C_ID).TO(LANE_C_BOARD_ID).
				As("Lanes")

	// intermediary table
	BOARD_USER = db.TABLE("USERS").As("Users")
	BOARD_USER_C_USERS_ID = BOARD_USER.KEY("USER").As("Users")
	BOARD_USER_C_BOARDS_ID = BOARD_USER.KEY("BOARD").As("Boards")
	
    // many to many
    BOARD_A_USERS = db.NewM2MAssociation(
        "users", 
        db.ASSOCIATE(BOARD_C_ID).WITH(BOARD_USER_C_BOARDS_ID),
        db.ASSOCIATE(BOARD_USER_C_USERS_ID).WITH(USER_C_ID),
    )
		
	BOARD_A_USER_CREATION = BOARD.ASSOCIATE(BOARD_C_USER_CREATION).TO(USER_C_ID).As("UserCreation")
	BOARD_A_USER_MODIFICATION = BOARD.ASSOCIATE(BOARD_C_USER_MODIFICATION).TO(USER_C_ID).As("UserModification")
)

func init() {
	BOARD.PreInsertTrigger = func(ins *db.Insert) {
		ins.Set(BOARD_C_VERSION, 1)
		ins.Set(BOARD_C_CREATION, NOW())
		uid, ok := ins.GetDb().GetAttribute(entity.ATTR_USERID)
		if ok {
			ins.Set(BOARD_C_USER_CREATION, uid.(int64))
		}
	}
	BOARD.PreUpdateTrigger = func(upd *db.Update) {
		upd.Set(BOARD_C_MODIFICATION, NOW())
		uid, ok := upd.GetDb().GetAttribute(entity.ATTR_USERID)
		if ok {
			upd.Set(BOARD_C_USER_MODIFICATION, uid.(int64))
		}
	}
}
