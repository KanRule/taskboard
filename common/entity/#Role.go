/**
 * WARNING: Generated code! do not change!
 * Generated by: go/Entity.ftl
 */
package entity;
import (
	"github.com/quintans/toolkit"
	"github.com/quintans/taskboard/common/lov"
	"github.com/quintans/toolkit/ext"
)

var _ toolkit.Hasher = &Role{}

func NewRole() *Role {
	this := new(Role)	
	return this
}

type Role struct {
	EntityAudit
	
	//ATTRIBUTES
	Kind lov.ERole `json:"kind"`
	UserId *int64 `json:"userId"`
	// ASSOCIATIONS
	// user
	User *User `json:"user"`
}

func (this *Role) Clone() interface{} {
	clone := NewRole()
	clone.Copy(this)
	return clone
}
	
func (this *Role) Copy(entity *Role) {
	if entity != nil {
		this.EntityAudit.Copy(entity.EntityAudit)
		// attributes
		this.Kind = entity.Kind
		// associations
		this.User = entity.User
	}
}
		
func (this *Role) String() string {
	sb := toolkit.NewStrBuffer()
	sb.Add("{Id: ", this.Id, ", Version: ", this.Version)
	sb.Add(", Kind: ", this.Kind)
	sb.Add(", *UserId: ", *this.UserId)
	sb.Add("}")
	return sb.String()
}
	
func (this *Role) Equals(e interface{}) bool {
	if this == e {
		return true
	}

	switch t := e.(type) {
	case *Role:
		return this.Id != nil && t.Id != nil && *this.Id == *t.Id
	}
	return false
}

func (this *Role) HashCode() int {
	result := toolkit.HashType(toolkit.HASH_SEED, this)
	result = toolkit.HashLong(result, ext.DefInt64(this.Id, 0))
	return result
}
