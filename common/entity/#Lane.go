/**
 * WARNING: Generated code! do not change!
 * Generated by: go/Entity.ftl
 */
package entity;
import (
	"github.com/quintans/toolkit"
	"github.com/quintans/toolkit/ext"
	"github.com/quintans/toolkit/web/app"
)

var _ toolkit.Hasher = &Lane{}

func NewLane() *Lane {
	this := new(Lane)	
	return this
}

type Lane struct {
	EntityAudit
	
	//ATTRIBUTES
	Name *string `json:"name"`
	Position *int64 `json:"position"`
	BoardId *int64 `json:"boardId"`
	// ASSOCIATIONS
	// board
	Board *Board `json:"board"`
	// tasks
	Tasks []*Task `json:"tasks"`
	// notifications
	Notifications []*Notification `json:"notifications"`
}

func (this *Lane) Clone() interface{} {
	clone := NewLane()
	clone.Copy(this)
	return clone
}
	
func (this *Lane) Copy(entity *Lane) {
	if entity != nil {
		this.EntityAudit.Copy(entity.EntityAudit)
		// attributes
		this.Name = app.CopyString(entity.Name)
		this.Position = app.CopyInteger(entity.Position)
		// associations
		this.Board = entity.Board
		this.Tasks = make([]*Task, len(entity.Tasks), cap(entity.Tasks))
		copy(this.Tasks, entity.Tasks)
		this.Notifications = make([]*Notification, len(entity.Notifications), cap(entity.Notifications))
		copy(this.Notifications, entity.Notifications)
	}
}
		
func (this *Lane) String() string {
	sb := toolkit.NewStrBuffer()
	sb.Add("{Id: ", this.Id, ", Version: ", this.Version)
	sb.Add(", Name: ", this.Name)
	sb.Add(", Position: ", this.Position)
	sb.Add(", BoardId: ", this.BoardId)
	sb.Add("}")
	return sb.String()
}
	
func (this *Lane) Equals(e interface{}) bool {
	if this == e {
		return true
	}

	switch t := e.(type) {
	case *Lane:
		return this.Id != nil && t.Id != nil && *this.Id == *t.Id
	}
	return false
}

func (this *Lane) HashCode() int {
	result := toolkit.HashType(toolkit.HASH_SEED, this)
	result = toolkit.HashLong(result, ext.DefInt64(this.Id, 0))
	return result
}
